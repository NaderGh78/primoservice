/**
 * Josh.js - A JavaScript library to animate content on page scroll.
 * Version: 1.0.0
 * Author: Al Mamun
 * License: MIT
 * Repo: https://github.com/mamunhpath/josh.js
 * Demo: https://mamunhpath.github.io/josh.js
 */

class Josh{ constructor(t = {}) { this.initClass = t.initClass || "josh-js", this.initDom = document.querySelectorAll("." + this.initClass), this.animClass = t.animClass || "animate__animated", this.offset = t.offset || .1, this.animateInMobile = void 0 === t.animateInMobile || t.animateInMobile, this.onDOMChange = void 0 !== t.onDOMChange && t.onDOMChange, this.intersectOnScroll(this.initDom), this.callOnDOMChange(), this.addCss(this.initDom) } intersectionObserverCallback(t, i) { const s = !this.animateInMobile && this.isMobile(); t.forEach(t => { const e = t.target, n = e.dataset.joshAnimName, o = e.dataset.joshIteration, a = e.dataset.joshDuration, r = e.dataset.joshDelay; if (t.isIntersecting) { let t = `visibility: visible;animation-name: ${n};animation-duration: ${a};animation-iteration-count: ${o};animation-delay: ${r};`; s || (e.style = e.style.cssText + t), i.unobserve(e) } }) } addCss(t) { t.length > 0 ? t.forEach(t => { this.cssUtil(t) }) : this.cssUtil(t) } cssUtil(t) { const i = !this.animateInMobile && this.isMobile(); t.classList.add(this.animClass), i || (t.style = t.style.cssText + "visibility: hidden") } intersectOnScroll(t) { if (!("IntersectionObserver" in window)) throw new Error("IntersectionObserver is not support. Try by adding pollyfil or use other library."); { const i = new IntersectionObserver(this.intersectionObserverCallback.bind(this), { root: null, rootMargin: "0px", threshold: this.offset }); t.length > 0 ? t.forEach(t => { i.observe(t) }) : i.observe(t) } } callOnDOMChange() { window.addEventListener("DOMContentLoaded", () => { if (this.onDOMChange) { const t = { childList: !0, subtree: !0 }; new MutationObserver(t => { t.forEach(t => { const i = t.addedNodes; null !== i && i.forEach(t => { this.addCss(t), this.intersectOnScroll(t) }) }) }).observe(document.body, t) } }) } isMobile() { return /Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) } }